from connections import connectiondef
import pandas as pd
import numpy as np
from paths import SETTINGS


# Кастомная функция для группировки
def joinUniqu(x):
    uniqu = x.drop_duplicates()
    array = uniqu.values
    string = ''
    last = len(array) - 1
    for i in range(0, len(array)):
        string += str(array[i])
        if i != last:
            string += '\n'
    return string


# df1 = df1.groupby(by='A').agg({'B': joinUniqu, 'C': joinUniqu})


# templates = {
#     'Температура': {
#         'Позиция': (0, 4),
#         'Назначение': (1, 4),
#         'Место установки': (2, 4),
#         'Размер трубопровода': (3, 4),
#         # 'Материал трубопровода': (4, 4),
#         'Среда': (4, 4),
#         'Агрегатное состояние': (5, 4),
#         'T min': (6, 4),
#         'T max': (7, 4),
#         'T раб': (8, 4),
#         'Единицы измерения температуры': (8, 5),
#         'P min': (9, 4),
#         'P max': (10, 4),
#         'P раб': (11, 4),
#         'Единицы измерения давления': (11, 5),
#         'Плотность': (12, 4),
#         'Единицы измерения плотности': (12, 5),
#         'Вязкость': (13, 4),
#         'Единицы измерения вязкости': (13, 5),
#         'Агрессивность': (14, 4),
#         'Другие особые условия': (15, 4),
#         'Тип сенсора': (16, 4),
#         'Градуировка НСХ': (17, 4),
#         'Диаметр ЧЭ': (18, 4),
#         'Длина сенсора': (19, 4),
#         'Соединение с процессом чувствительного элемента': (20, 4),
#         'Температурная вставка (удлинитель)': (21, 4),
#         'Шкала прибора': (22, 4),
#         'Тип сигналов*': (23, 4),
#         'Напряжение питания': (24, 4),
#         'Схема подключения (сигнал)': (25, 4),
#         'Погрешность измерения': (26, 4),
#         'Взрывозащита*': (27, 4),
#         'Уровень безопасности SIL': (28, 4),
#         'Степень защиты': (29, 4),
#         'Тип корпуса': (30, 4),
#         'Материал корпуса': (31, 4),
#         'Тип защитной гильзы': (32, 4),
#         'Тип резьбы гильзы': (33, 4),
#         'Длина погружаемой части гильзы': (34, 4),
#         'Маркировка защитной гильзы': (35, 4),
#         'Местный индикатор': (36, 4),
#         'Кабельный ввод': (37, 4),
#         'Марка кабеля': (38, 4),
#         'Изготовитель': (39, 4),
#         'Модель': (40, 4),
#         'Примечание': (41, 4),
#     },
#     'Давление': {
#         'Позиция': (0, 4),
#         'Назначение': (1, 4),
#         'Место установки': (2, 4),
#         'Среда': (3, 4),
#         'Агрегатное состояние': (4, 4),
#         'T min': (5, 4),
#         'T max': (6, 4),
#         'T раб': (7, 4),
#         'Единицы измерения температуры': (7, 5),
#         'P min': (8, 4),
#         'P max': (9, 4),
#         'P раб': (10, 4),
#         'P стат': (11, 4),
#         'Перепад давления': (12, 4),
#         'Единицы измерения давления': (12, 5),
#         'Плотность': (13, 4),
#         'Единицы измерения плотности': (13, 5),
#         'Вязкость': (14, 4),
#         'Единицы измерения вязкости': (14, 5),
#         'Агрессивность': (15, 4),
#         'Другие особые условия': (16, 4),
#         'Измеряемый параметр': (17, 4),
#         'Шкала прибора': (18, 4),
#         'Тип сигналов*': (19, 4),
#         'Напряжение питания': (20, 4),
#         'Схема подключения (сигнал)': (21, 4),
#         'Погрешность измерения': (22, 4),
#         'Взрывозащита*': (23, 4),
#         'Степень защиты': (24, 4),
#         'Уровень безопасности SIL': (25, 4),
#         'Материал корпуса': (26, 4),
#         'Соединение с процессом': (27, 4),
#         'Мембранный разделитель': (28, 4),
#         'Подвод импульсных трубок': (29, 4),
#         'Сторона высокого давления': (30, 4),
#         'Тип вентильного блока': (31, 4),
#         'Тип резьбы вентильного блока для подключения импульсных линий / датчика': (32, 4),
#         'Тип дренажного соединения вентильного блока': (33, 4),
#         'Ниппель для присоединения импульсных линий': (34, 4),
#         'Местный индикатор': (35, 4),
#         'Комплект монтажных частей': (36, 4),
#         'Кабельный ввод': (37, 4),
#         'Марка кабеля': (38, 4),
#         'Изготовитель': (39, 4),
#         'Модель': (40, 4),
#         'Примечание': (41, 4),
#     },
#     'Расход': {
#         'Позиция': (0, 4),
#         'Назначение': (1, 4),
#         'Место установки': (2, 4),
#         'Размер трубопровода': (3, 4),
#         'Материал трубопровода': (4, 4),
#         'Среда': (5, 4),
#         'Агрегатное состояние': (6, 4),
#         'Q min': (7, 4),
#         'Q max': (8, 4),
#         'Q раб': (9, 4),
#         'Единицы измерения расхода': (9, 5),
#         'T min': (10, 4),
#         'T max': (11, 4),
#         'T раб': (12, 4),
#         'Единицы измерения температуры': (12, 5),
#         'P min': (13, 4),
#         'P max': (14, 4),
#         'P расч': (15, 4),
#         'P раб': (16, 4),
#         'Единицы измерения давления': (16, 5),
#         'Плотность': (17, 4),
#         'Единицы измерения плотности': (17, 5),
#         'Вязкость': (18, 4),
#         'Единицы измерения вязкости': (18, 5),
#         'Агрессивность': (19, 4),
#         'Другие особые условия': (20, 4),
#         'Метод измерения': (21, 4),
#         'Шкала прибора': (22, 4),
#         'Единицы измерения шкалы приборв': (22, 5),
#         'Погрешность': (23, 4),
#         'Тип сигналов*': (24, 4),
#         'Напряжение питания': (25, 4),
#         'Схема подключения (сигнал)': (26, 4),
#         'Местный индикатор': (27, 4),
#         'Кабельный ввод': (28, 4),
#         'Марка кабеля': (29, 4),
#         'Взрывозащита*': (30, 4),
#         'Степень защиты': (31, 4),
#         'Уровень безопасности SIL': (32, 4),
#         'Тип диафрагмы': (33, 4),
#         'Номер исполнения': (34, 4),
#         'Материал диафрагмы': (35, 4),
#         'Способ отбора давления': (36, 4),
#         'Тип фланцев': (37, 4),
#         'DN фланцев': (38, 4),
#         'PN фланцев, кгс/см2': (39, 4),
#         'Разделительные сосуды/мембраны/вентильные блоки': (40, 4),
#         'Комплект монтажных частей': (41, 4),
#         'Изготовитель': (42, 4),
#         'Модель': (43, 4),
#         'Примечание': (44, 4)
#     },
#     'Уровень': {
#         'Позиция': (0, 4),
#         'Назначение': (1, 4),
#         'Место установки': (2, 4),
#         'Тип прибора': (3, 4),
#         'Тип аппарата': (4, 4),
#         'Диаметр (длина) /Ширина /Высота аппарата': (5, 4),
#         'Выносная камера (штуцер) на аппарате': (6, 4),
#         'Длина камеры (штуцера) на аппарате': (7, 4),
#         'Диаметр камеры (штуцера) на аппарате': (8, 4),
#         'Среда верхней среды': (9, 4),
#         'Среда нижней среды': (10, 4),
#         'T min': (11, 4),
#         'T max': (12, 4),
#         'T раб': (13, 4),
#         'Единицы измерения температуры': (13, 6),
#         'P min': (14, 4),
#         'P max': (15, 4),
#         'P раб': (16, 4),
#         'Единицы измерения давления': (16, 6),
#         'Плотность верхней среды': (17, 4),
#         'Плотность нижней среды': (18, 4),
#         'Единицы измерения плотности верхней среды': (18, 6),
#         'Вязкость верхней среды': (19, 4),
#         'Вязкость нижней среды': (20, 4),
#         'Единицы измерения вязкости верхней среды': (20, 6),
#         'Агрессивность верхней среды': (21, 4),
#         'Агрессивность нижней среды': (22, 4),
#         'Другие особые условия верхней среды': (23, 4),
#         'L min': (24, 4),
#         'L max': (25, 4),
#         'Единицы измерения уровня': (25, 6),
#         'Длина чувствительного элемента': (26, 4),
#         'Подвод импульсных трубок': (27, 4),
#         'Сторона высокого давления': (28, 4),
#         'Тип фланцев / резьбы': (29, 4),
#         'DN фланцев': (30, 4),
#         'PN фланцев': (31, 4),
#         'Выносная камера в комплекте с прибором': (32, 4),
#         'Тип фланцев выносной камеры': (33, 4),
#         'DN фланцев выносной камеры': (34, 4),
#         'PN фланцев выносной камеры': (35, 4),
#         'Измеряемый параметр': (36, 4),
#         'Шкала прибора': (37, 4),
#         'Тип сигналов*': (38, 4),
#         'Напряжение питания': (39, 4),
#         'Схема подключения (сигнал)': (40, 4),
#         'Погрешность измерения': (41, 4),
#         'Взрывозащита*': (42, 4),
#         'Уровень безопасности SIL': (43, 4),
#         'Степень защиты': (44, 4),
#         'Материал корпуса': (45, 4),
#         'Ответный фланец / бобышка в комплекте': (46, 4),
#         'Тип вентильного блока': (47, 4),
#         'Тип резьбы вентильного блока под импульсные линии/датчик': (48, 4),
#         'Тип дренажного соединения вентильного блока': (49, 4),
#         'Ниппель для присоединения импульсных линий': (50, 4),
#         'Местный индикатор': (51, 4),
#         'Комплект монтажных частей': (52, 4),
#         'Кабельный ввод': (53, 4),
#         'Марка кабеля': (54, 4),
#         'Изготовитель': (55, 4),
#         'Модель': (56, 4),
#         'Примечание': (57, 4),
#     },
#     'Регулирующий клапан': {
#         'Позиция': (0, 4),
#         'Назначение': (1, 4),
#         'Место установки': (2, 4),
#         'Размер трубопровода': (3, 4),
#         'Материал трубопровода': (4, 4),
#         'Среда': (5, 4),
#         'Агрегатное состояние': (6, 4),
#         'Q min': (7, 4),
#         'Q max': (8, 4),
#         'Q раб': (9, 4),
#         'Единицы измерения расхода': (9, 5),
#         'T min': (10, 4),
#         'T max': (11, 4),
#         'T раб': (12, 4),
#         'Единицы измерения температуры': (12, 5),
#         'P min': (13, 4),
#         'P max': (14, 4),
#         'P раб': (15, 4),
#         'P расч': (16, 4),
#         'Падение давления на клапане (макс)': (17, 4),
#         'Единицы измерения давления': (17, 5),
#         'Рабочий диапазон регулирования': (18, 4),
#         'Единицы измерения диапазона регулирования': (18, 5),
#         'Плотность': (19, 4),
#         'Единицы измерения плотности': (19, 5),
#         'Вязкость': (20, 4),
#         'Единицы измерения вязкости': (20, 5),
#         'Агрессивность': (21, 4),
#         'Другие особые условия': (22, 4),
#         'Направление потока': (23, 4),
#         'Тип привода': (24, 4),
#         'Класс герметичности': (25, 4),
#         'Пропускная характеристика': (26, 4),
#         'Направление действия': (27, 4),
#         'Давление питающего воздуха': (28, 4),
#         'Положение при отсутствии воздуха/электропитания': (29, 4),
#         'Тип позиционера': (30, 4),
#         'Напряжение питания позиционера': (31, 4),
#         'Выходной сигнал позиционера': (32, 4),
#         'Взрывозащита позиционера': (33, 4),
#         'Степень защиты позиционера': (34, 4),
#         'Манометр позиционера': (35, 4),
#         'Кабельный ввод позиционера': (36, 4),
#         'Марка кабеля позиционера': (37, 4),
#         'Соединение с процессом': (38, 4),
#         'Тип фланцев': (39, 4),
#         'DN фланцев': (40, 4),
#         'PN фланцев': (41, 4),
#         'DN существующего клапана': (42, 4),
#         'PN существующего клапана': (43, 4),
#         'Изготовитель': (44, 4),
#         'Модель': (45, 4),
#         'Примечание': (46, 4)
#     },
#     'Задвижка': {
#         'Позиция': (0, 4),
#         'Назначение': (1, 4),
#         'Место установки': (2, 4),
#         'Размер трубопровода': (3, 4),
#         'Материал трубопровода': (4, 4),
#         'Среда': (5, 4),
#         'Агрегатное состояние': (6, 4),
#         'Q min': (7, 4),
#         'Q max': (8, 4),
#         'Q раб': (9, 4),
#         'Единицы измерения расхода': (9, 5),
#         'T min': (10, 4),
#         'T max': (11, 4),
#         'T раб': (12, 4),
#         'Единицы измерения температуры': (12, 5),
#         'P min': (13, 4),
#         'P max': (14, 4),
#         'P раб': (15, 4),
#         'P расч': (16, 4),
#         'Падение давления на клапане (макс)': (17, 4),
#         'Единицы измерения давления': (17, 5),
#         'Плотность': (18, 4),
#         'Единицы измерения плотности': (18, 5),
#         'Вязкость': (19, 4),
#         'Единицы измерения вязкости': (19, 5),
#         'Агрессивность': (20, 4),
#         'Другие особые условия': (21, 4),
#         'Направление потока': (22, 4),
#         'Класс герметичности': (23, 4),
#         'Тип привода': (24, 4),
#         'Давление питающего воздуха': (25, 4),
#         'Положение при отсутствии воздуха / электропитания': (26, 4),
#         'Время открытия / закрытия': (27, 4),
#         'Ручное управление': (28, 4),
#         'Уровень безопасности SIL': (29, 4),
#         'Напряжение питания': (30, 4),
#         'Взрывозащита': (31, 4),
#         'Степень защиты': (32, 4),
#         'Кабельный ввод (сигнал)': (33, 4),
#         'Марка кабеля (сигнал)': (34, 4),
#         'Тип конечного выключателя': (35, 4),
#         'Положение конечного выключателя': (36, 4),
#         'Взрывозащита конечного выключателя': (37, 4),
#         'Степень защиты конечного выключателя': (38, 4),
#         'Соединительная коробка конечного выключателя': (39, 4),
#         'Кабельный ввод конечного выключателя': (40, 4),
#         'Марка кабеля конечного выключателя': (41, 4),
#         'Соединение с процессом': (42, 4),
#         'Тип фланцев': (43, 4),
#         'DN фланцев': (44, 4),
#         'PN фланцев': (45, 4),
#         'DN существующего клапана': (46, 4),
#         'PN существующего клапана': (47, 4),
#         'Изготовитель': (48, 4),
#         'Модель': (49, 4),
#         'Примечание': (50, 4)
#     }
# }
def check_column_name(db_col_name, template_col_name):
    col_temp = np.array(list(template_col_name))
    mask = np.in1d(col_temp, db_col_name)
    error_col_name = col_temp[~mask]
    if len(error_col_name) > 0:
        print(f'В базе отсутствуют столбцы {error_col_name}')
        return True
    else:
        return False


def getTemptureForOL():
    pp = connectiondef('Перечень приборов')
    env = connectiondef('Среда')
    tempture = connectiondef('Температура')

    df_pp = pd.DataFrame(pp[1:], columns=pp[0]).fillna('')
    df_pp = df_pp[df_pp['Параметр'] == 'Температура']
    df_env = pd.DataFrame(env[1:], columns=env[0]).fillna('')
    df_tempture = pd.DataFrame(tempture[1:], columns=tempture[0]).fillna('')

    df = pd.merge(left=df_pp,
                  right=df_tempture,
                  how='left',
                  on='Позиция',
                  indicator=True,
                  suffixes=('_x', '')).drop(['_merge'], axis=1).reset_index(drop=True).fillna('')
    df['Примечание'] = df['Примечание'].astype('str') + ' ' + df['Примечание_x'].astype('str')
    df.replace('  ', '-', inplace=True)
    df.drop(df.filter(regex='_x$').columns, axis=1, inplace=True)

    df = pd.merge(left=df,
                  right=df_env,
                  how='left',
                  on='Идентификатор среды',
                  indicator=True,
                  suffixes=('', '_y')).drop(['_merge'], axis=1).reset_index(drop=True).fillna('')
    df.drop(df.filter(regex='_y$').columns, axis=1, inplace=True)
    df = df[(df['Необходимость проектирования'] == 'ЗАМ.') | (df['Необходимость проектирования'] == 'НОВ.')]
    df.replace('', '-', inplace=True)

    # Сортировка позиций для опросных листов

    df = df.sort_values(['Компрессор', 'Позиция'], ascending=[True, True]) \
        .reset_index(drop=True)

    df.reset_index(drop=False, inplace=True)

    # Определение номера первого листа
    shift_first_list = (df.shape[0] - 50) // 54
    if (df.shape[0] - 50) % 54 != 0:
        shift_first_list += 1

    df['index'] = df['index'] + 1
    df['Номер листа'] = df['index'] + 5 + shift_first_list
    df['Изменения'] = ''
    df_table_list_positions = df[['Изменения', 'index', 'Позиция', 'Номер схемы', 'Тип сенсора', 'Номер листа']].copy()
    # Проверка наличия всех столбцов из шаблона
    templates_key = SETTINGS['template_temperature'].keys()
    col_name = df.columns.values
    if check_column_name(col_name, templates_key):
        return
    else:
        df_ol_table = df[list(SETTINGS['template_temperature'].keys())].copy()
        return df_table_list_positions, df_ol_table


def getPressureForOL():
    pp = connectiondef('Перечень приборов')
    env = connectiondef('Среда')
    pressure = connectiondef('Давление')

    df_pp = pd.DataFrame(pp[1:], columns=pp[0]).fillna('-')
    df_pp = df_pp[df_pp['Параметр'] == 'Давление']
    df_env = pd.DataFrame(env[1:], columns=env[0]).fillna('-')
    df_pressure = pd.DataFrame(pressure[1:], columns=pressure[0]).fillna('-')

    df = pd.merge(left=df_pp,
                  right=df_pressure,
                  how='left',
                  on='Позиция',
                  indicator=True,
                  suffixes=('', '_y')).drop(['_merge'], axis=1).reset_index(drop=True).fillna('')
    df['Примечание'] = df['Примечание'].astype('str') + ' ' + df['Примечание_y'].astype('str')
    df.replace('  ', '-', inplace=True)
    df.drop(df.filter(regex='_y$').columns, axis=1, inplace=True)

    df = pd.merge(left=df,
                  right=df_env,
                  how='left',
                  on='Идентификатор среды',
                  indicator=True,
                  suffixes=('', '_y')).drop(['_merge'], axis=1).reset_index(drop=True).fillna('')
    df.drop(df.filter(regex='_y$').columns, axis=1, inplace=True)
    df = df[(df['Необходимость проектирования'] == 'ЗАМ.') | (df['Необходимость проектирования'] == 'НОВ.')]
    df.replace('', '-', inplace=True)

    conditions = [
        df['Тип прибора'] == 'Манометр',
        df['Тип прибора'] == 'Датчик избыточного давления',
        df['Тип прибора'] == 'Датчик перепада давления',
    ]
    coices = [0, 1, 2]
    df['sorted'] = np.select(conditions, coices, default='-')

    # Сортировка позиций для опросных листов

    df = df.sort_values(['sorted', 'Компрессор', 'Позиция'], ascending=[True, True, True]) \
        .reset_index(drop=True)

    df.reset_index(drop=False, inplace=True)

    shift_first_list = (df.shape[0] - 50) // 54
    if (df.shape[0] - 50) % 54 != 0:
        shift_first_list += 1

    df['index'] = df['index'] + 1
    df['Номер листа'] = df['index'] + 5 + shift_first_list
    df['Изменения'] = ''
    df_table_list_positions = df[['Изменения', 'index', 'Позиция', 'Номер схемы', 'Тип прибора', 'Номер листа']].copy()
    # df_ol_table = df[SETTINGS['template_pressure'].keys()].copy()
    templates_key = SETTINGS['template_pressure'].keys()
    col_name = df.columns.values
    if check_column_name(col_name, templates_key):
        return
    else:
        df_ol_table = df[list(SETTINGS['template_pressure'].keys())].copy()
        return (df_table_list_positions, df_ol_table)


def getFlowForOL():
    pp = connectiondef('Перечень приборов')
    env = connectiondef('Среда')
    pressure = connectiondef('Расход')

    df_pp = pd.DataFrame(pp[1:], columns=pp[0]).fillna('')
    df_pp = df_pp[df_pp['Параметр'] == 'Расход']
    df_env = pd.DataFrame(env[1:], columns=env[0]).fillna('')
    df_pressure = pd.DataFrame(pressure[1:], columns=pressure[0]).fillna('')

    df = pd.merge(left=df_pp,
                  right=df_pressure,
                  how='left',
                  on='Позиция',
                  indicator=True,
                  suffixes=('', '_y')).drop(['_merge'], axis=1).reset_index(drop=True).fillna('')
    df['Примечание'] = df['Примечание'].astype('str') + ' ' + df['Примечание_y'].astype('str')
    df.replace('  ', '-', inplace=True)
    df.drop(df.filter(regex='_y$').columns, axis=1, inplace=True)

    df = pd.merge(left=df,
                  right=df_env,
                  how='left',
                  on='Идентификатор среды',
                  indicator=True,
                  suffixes=('', '_y')).drop(['_merge'], axis=1).reset_index(drop=True).fillna('')
    df.drop(df.filter(regex='_y$').columns, axis=1, inplace=True)
    df = df[(df['Необходимость проектирования'] == 'ЗАМ.') | (df['Необходимость проектирования'] == 'НОВ.')]
    df.replace('', '-', inplace=True)

    # Сортировка позиций для опросных листов

    df = df.sort_values(['Компрессор', 'Позиция'], ascending=[True, True]) \
        .reset_index(drop=True)

    df.reset_index(drop=False, inplace=True)

    shift_first_list = (df.shape[0] - 31) // 33
    if (df.shape[0] - 31) % 33 != 0:
        shift_first_list += 1

    df['index'] = df['index'] + 1
    df['Номер листа'] = df['index'] + 5 + shift_first_list
    df['Изменения'] = ''
    df_table_list_positions = df[
        ['Изменения', 'index', 'Позиция', 'Номер схемы', 'Метод измерения', 'Номер листа']].copy()
    # df_ol_table = df[SETTINGS['template_flow'].keys()].copy()

    # return (df_table_list_positions, df_ol_table)
    templates_key = SETTINGS['template_flow'].keys()
    col_name = df.columns.values
    if check_column_name(col_name, templates_key):
        return
    else:
        df_ol_table = df[list(SETTINGS['template_flow'].keys())].copy()
        return (df_table_list_positions, df_ol_table)


def getLevelForOL():
    pp = connectiondef('Перечень приборов')
    env = connectiondef('Среда')
    pressure = connectiondef('Уровень')

    df_pp = pd.DataFrame(pp[1:], columns=pp[0]).fillna('')
    df_pp = df_pp[df_pp['Параметр'] == 'Уровень']
    df_env = pd.DataFrame(env[1:], columns=env[0]).fillna('')
    df_pressure = pd.DataFrame(pressure[1:], columns=pressure[0]).fillna('')

    df = pd.merge(left=df_pp,
                  right=df_pressure,
                  how='left',
                  on='Позиция',
                  indicator=True,
                  suffixes=('', '_y')).drop(['_merge'], axis=1).reset_index(drop=True).fillna('')
    df['Примечание'] = df['Примечание'].astype('str') + ' ' + df['Примечание_y'].astype('str')
    df.replace('  ', '-', inplace=True)
    df.drop(df.filter(regex='_y$').columns, axis=1, inplace=True)
    df_env_old_collumns = df_env.columns
    df_env.columns = [df_env.columns[0]] + (list(map(lambda x: str(x) + ' верхней среды', df_env.columns[1:])))

    df = pd.merge(left=df,
                  right=df_env,
                  how='left',
                  left_on='Идентификатор верхней среды',
                  right_on='Идентификатор среды',
                  indicator=True,
                  suffixes=('', '_y')).drop(['_merge'], axis=1).reset_index(drop=True).fillna('')
    df.drop(df.filter(regex='_y$').columns, axis=1, inplace=True)

    df_env.columns = df_env_old_collumns
    df_env.columns = [df_env.columns[0]] + (list(map(lambda x: str(x) + ' нижней среды', df_env.columns[1:])))

    df = pd.merge(left=df,
                  right=df_env,
                  how='left',
                  left_on='Идентификатор нижней среды',
                  right_on='Идентификатор среды',
                  indicator=True,
                  suffixes=('', '_y')).drop(['_merge'], axis=1).reset_index(drop=True).fillna('')
    df.drop(df.filter(regex='_y$').columns, axis=1, inplace=True)
    df['Другие особые условия'] = df['Другие особые условия верхней среды'] + df['Другие особые условия нижней среды']
    df = df[(df['Необходимость проектирования'] == 'ЗАМ.') | (df['Необходимость проектирования'] == 'НОВ.')]
    df.replace('', '-', inplace=True)

    # Сортировка позиций для опросных листов

    df = df.sort_values(['Компрессор', 'Позиция'], ascending=[True, True]) \
        .reset_index(drop=True)

    df.reset_index(drop=False, inplace=True)

    shift_first_list = (df.shape[0] - 31) // 33
    if (df.shape[0] - 31) % 33 != 0:
        shift_first_list += 1

    df['index'] = df['index'] + 1
    df['Номер листа'] = df['index'] + 5 + shift_first_list
    df['Изменения'] = ''
    df_table_list_positions = df[
        ['Изменения', 'index', 'Позиция', 'Номер схемы', 'Тип прибора', 'Номер листа']].copy()
    # df_ol_table = df[SETTINGS['template_level'].keys()].copy()

    # return (df_table_list_positions, df_ol_table)
    templates_key = SETTINGS['template_level'].keys()
    col_name = df.columns.values
    if check_column_name(col_name, templates_key):
        return
    else:
        df_ol_table = df[list(SETTINGS['template_level'].keys())].copy()
        return (df_table_list_positions, df_ol_table)


# TODO: Функция для получения df (1 шт) для формирования ИО
""""
"Позиция" - ИО
"Номер схемы" - ПП
"Назначение сигнала" - ИО
"Тип сигнала" - ИО
"Взрывозащита" - ИО
"Напряжение питания" - ПП
"Единицы измерения" - из Температура, Давление, Расход, Уровень, Анализатор, Регулирующий клапан
"Сигнализация L" - ИО
"Блокировка LL" - ИО
"Блокировка HH" - ИО
"Перечень управляющих воздействий" - ИО
"Тип канала" - ИО
"Система" - ПП
"Уровень безопасности SIL" - из Температура, Давление, Расход, Уровень, Анализатор, Отсечной клапан
"Примечание" - ИО
"""


def get_io():
    arrya_io = connectiondef('ИО')
    df_io = pd.DataFrame(arrya_io[1:], columns=arrya_io[0])[
        ["Позиция",
         "Тег сигнала",
         "Назначение сигнала",
         "Тип сигнала",
         "Взрывозащита",
         "Сигнализация L",
         "Сигнализация H",
         "Блокировка LL",
         "Блокировка HH",
         "Перечень управляющих воздействий",
         "Тип канала",
         "Примечание"]].fillna('')

    arrya_pp = connectiondef('Перечень приборов')
    df_pp = pd.DataFrame(arrya_pp[1:], columns=arrya_pp[0])[["Позиция",
                                                             "Номер схемы",
                                                             "Напряжение питания",
                                                             "Система"]].fillna('')

    arrya_t = connectiondef('Температура')
    df_t = pd.DataFrame(arrya_t[1:], columns=arrya_t[0])[["Позиция",
                                                          "Единицы измерения температуры",
                                                          "Уровень безопасности SIL"]].fillna('')
    df_t.columns = ['Позиция', 'Единицы измерения', 'Уровень безопасности SIL']

    arrya_p = connectiondef('Давление')
    df_p = pd.DataFrame(arrya_p[1:], columns=arrya_p[0])[["Позиция",
                                                          "Единицы измерения давления",
                                                          "Уровень безопасности SIL"]].fillna('')
    df_p.columns = ['Позиция', 'Единицы измерения', 'Уровень безопасности SIL']

    arrya_f = connectiondef('Расход')
    df_f = pd.DataFrame(arrya_f[1:], columns=arrya_f[0])[["Позиция",
                                                          "Единицы измерения расхода",
                                                          "Уровень безопасности SIL"]].fillna('')
    df_f.columns = ['Позиция', 'Единицы измерения', 'Уровень безопасности SIL']

    arrya_l = connectiondef('Уровень')
    df_l = pd.DataFrame(arrya_l[1:], columns=arrya_l[0])[["Позиция",
                                                          "Единицы измерения уровня",
                                                          "Уровень безопасности SIL"]].fillna('')
    df_l.columns = ['Позиция', 'Единицы измерения', 'Уровень безопасности SIL']

    arrya_a = connectiondef('Анализатор')
    df_a = pd.DataFrame(arrya_a[1:], columns=arrya_a[0])[["Позиция",
                                                          "Единицы измерения загазованности",
                                                          "Уровень безопасности SIL"]].fillna('')
    df_a.columns = ['Позиция', 'Единицы измерения', 'Уровень безопасности SIL']

    arrya_cv = connectiondef('Регулирующий клапан')
    df_cv = pd.DataFrame(arrya_cv[1:], columns=arrya_cv[0])[["Позиция",
                                                             "Единицы измерения диапазона регулирования"]].fillna('')
    df_cv.columns = ['Позиция', 'Единицы измерения']

    arrya_sov = connectiondef('Задвижка')
    df_sov = pd.DataFrame(arrya_sov[1:], columns=arrya_sov[0])[["Позиция",
                                                                "Уровень безопасности SIL"]].fillna('')
    df_sov.columns = ['Позиция', 'Единицы измерения']

    del (arrya_io, arrya_pp, arrya_t, arrya_p, arrya_f, arrya_l, arrya_a, arrya_cv, arrya_sov)

    all_device_df = pd.concat([df_t, df_p, df_f, df_l, df_a, df_cv, df_sov]).fillna('')

    all_device_df = all_device_df[all_device_df["Позиция"] != '']
    all_device_df.reset_index(drop=True, inplace=True)
    all_device_df.drop_duplicates(subset=["Позиция"], inplace=True)

    del (df_t, df_p, df_f, df_l, df_a, df_cv, df_sov)

    df_io = df_io.merge(
        df_pp,
        how='left',
        on='Позиция'
    ).merge(
        all_device_df,
        how='left',
        on='Позиция'
    ).fillna('')

    del all_device_df

    return df_io


# TODO: Функция для получения df (1 шт) для формирования СП
"""
Позиция
Наименование и тех характеристики
    Температура
        'Датчик температуры'
        'Тип сенсора: ' + 'Тип сенсора' + 'Градуировка НСХ' - Температура
        'Выходной сигнал: '
        'Степень защиты: '
        'Взрывозащита: '
        'Шкала: '
    Давление
        'Измеряемый параметр'
        'Выходной сигнал: '
        'Степень защиты: '
        'Взрывозащита: '
        'Шкала: '
        'Комплект'
    Расход
        'Метод измерения (тип датчика)'
        'Выходной сигнал: '
        'Степень защиты: '
        'Взрывозащита: '
        'Шкала: '
    Уровень
        'Тип прибора'
        'Выходной сигнал: '
        'Степень защиты: '
        'Взрывозащита: '
        'Шкала: '
    Анализатор
        'Параметр'
        'Выходной сигнал: '
        'Напряжение питания: '
        'Степень защиты: '
        'Взрывозащита: '
        'Диапазон измерения: '
        'Тип сенсора: '
    Регулирующий клапан
        
    Отсечной клапан
Номер опросного листа (Название документа из SETTINGS для данного типа)
Код продукции
Поставщик
Ед. измерения
Кол
Масса
Примечание - Перечень приборов
"""


def get_spec():
    arrya_pp = connectiondef('Перечень приборов')

    # Столбцы из Перечня приборов

    df_pp = pd.DataFrame(arrya_pp[1:], columns=arrya_pp[0])[[
        "Позиция",
        "Примечание",
        "Назначение"
    ]].fillna('')
    del arrya_pp
    df_pp.drop_duplicates(subset=["Позиция"])

    # Столбцы из ИО

    arrya_io = connectiondef('ИО')
    df_io = pd.DataFrame(arrya_io[1:], columns=arrya_io[0])[[
        "Позиция",
        "Тег сигнала",
        "Тип сигнала",
        "Взрывозащита",
        "Сигнал/питание"
    ]].fillna('')
    del arrya_io

    # Получили ИО_сигналы
    df_io_sig = df_io[df_io["Сигнал/питание"] == "Сигнал"][["Позиция", "Тип сигнала", "Взрывозащита"]]
    # df_io_sig.drop_duplicates(subset=["Позиция"], inplace=True)
    df_io_sig.groupby(by='Позиция').agg({"Тип сигнала": joinUniqu})

    # Получили ИО_питание
    df_io_power = df_io[df_io["Сигнал/питание"] == "Питание"][["Позиция", "Тип сигнала"]]
    df_io_power.columns = ["Позиция", "Питание"]
    df_io_power.drop_duplicates(subset=["Позиция"], inplace=True)
    # df_io_power.groupby(by='Позиция').agg({'Питание': joinUniqu})

    df_pp = df_pp.merge(
        df_io_sig,
        how="left",
        on="Позиция"
    ).merge(
        df_io_power,
        how="left",
        on="Позиция"
    ).fillna('')
    df_pp.rename({'Назначение': 'Наименование'}, inplace=True)

    del df_io, df_io_sig, df_io_power

    list_devices = ['Температура', 'Давление', 'Расход', 'Уровень']
    # list_devices = ['Температура', 'Давление', 'Расход', 'Уровень', 'Анализатор', 'Регулирующий клапан', 'Отсечной клапан']

    spec_dfs = []

    # Какие столбцы нужно вытащить из каждой вкладки приборов

    columns_for_device = {
        "Температура": [
            "Позиция",
            "Тип сенсора",
            "Градуировка НСХ",
            "Степень защиты",
            "Шкала прибора",
            "Единицы измерения температуры"
        ],
        "Давление": [
            "Позиция",
            "Измеряемый параметр",
            "Степень защиты",
            "Шкала прибора",
            "Единицы измерения давления",
            "Комплект монтажных частей"
        ],
        "Расход": [
            "Позиция",
            "Метод измерения",
            "Степень защиты",
            "Шкала прибора",
            "Единицы измерения расхода"
        ],
        "Уровень": [
            "Позиция",
            "Тип прибора",
            "Степень защиты",
            "Шкала прибора",
            "Единицы измерения уровня"
        ],
        # "Анализатор": [],
        # "Регулирующий клапан": [],
        # "Отсечной клапан": []
    }

    for device in list_devices:

        # Создать соответствующий df
        arrya = connectiondef(device)
        df = pd.DataFrame(arrya[1:], columns=arrya[0]).fillna('')
        del arrya

        df = df[columns_for_device[device]]
        df = df.merge(
            df_pp,
            how='left',
            on='Позиция'
        ).fillna('')

        if device == list_devices[0]:
            # Температура
            df['Техническая характеристика'] = 'Датчик температуры' + '\n' + \
                                               'Тип сенсора: ' + df['Тип сенсора'].astype(str) + ' ' + \
                                               df['Градуировка НСХ'].astype(str) + '\n' + \
                                               'Выходной сигнал: ' + df['Тип сигнала'].astype(str) + '\n' + \
                                               'Степень защиты: ' + df['Степень защиты'].astype(str) + '\n' + \
                                               'Взрывозащита: ' + df['Взрывозащита'].astype(str) + '\n' + \
                                               'Шкала: ' + df['Шкала прибора'].astype(str) + \
                                               df['Единицы измерения температуры'].astype(str) + '\n'

            df['Опросный лист'] = str(SETTINGS["file_name_temperature_ol"])
            df['sort_device_number'] = 0

        elif device == list_devices[1]:
            # Давление

            df['Техническая характеристика'] = df['Измеряемый параметр'].astype(str) + '\n' + \
                                               'Выходной сигнал: ' + df['Тип сигнала'].astype(str) + '\n' + \
                                               'Степень защиты: ' + df['Степень защиты'].astype(str) + '\n' + \
                                               'Взрывозащита: ' + df['Взрывозащита'].astype(str) + '\n' + \
                                               'Шкала: ' + df['Шкала прибора'].astype(str) + \
                                               df['Единицы измерения давления'].astype(str) + '\n' + \
                                               df['Комплект монтажных частей'].astype(str) + '\n'
            df['Опросный лист'] = str(SETTINGS["file_name_pressure_ol"])
            df['sort_device_number'] = 1

        elif device == list_devices[2]:
            # Расход

            df['Техническая характеристика'] = df['Метод измерения'].astype(str) + '\n' + \
                                               'Выходной сигнал: ' + df['Тип сигнала'].astype(str) + '\n' + \
                                               'Степень защиты: ' + df['Степень защиты'].astype(str) + '\n' + \
                                               'Взрывозащита: ' + df['Взрывозащита'].astype(str) + '\n' + \
                                               'Шкала: ' + df['Шкала прибора'].astype(str) + '\n'

            df['Опросный лист'] = str(SETTINGS["file_name_flow_ol"])
            df['sort_device_number'] = 2

        elif device == list_devices[3]:
            # Уровень

            df['Техническая характеристика'] = df['Тип прибора'].astype(str) + ' датчик уровня' + '\n' + \
                                               'Выходной сигнал: ' + df['Тип сигнала'].astype(str) + '\n' + \
                                               'Степень защиты: ' + df['Степень защиты'].astype(str) + '\n' + \
                                               'Взрывозащита: ' + df['Взрывозащита'].astype(str) + '\n' + \
                                               'Шкала: ' + df['Шкала прибора'].astype(str) + \
                                               df['Единицы измерения уровня'].astype(str) + '\n'

            df['Опросный лист'] = str(SETTINGS["file_name_level_ol"])
            df['sort_device_number'] = 3

        col = columns_for_device[device][:]
        col.remove('Позиция')
        df.drop(col, axis=1, inplace=True)
        spec_dfs.append(df)

    # print('')

    df = pd.concat(spec_dfs, ignore_index=True).reset_index(drop=True)
    df.drop(['Тип сигнала', 'Взрывозащита', 'Питание'], axis=1, inplace=True)
    df.reset_index(inplace=True)
    df_naz = df[['index', 'Назначение']].copy()
    df_naz.columns = ['index', 'Техническая характеристика']
    df_naz['sort_row'] = 0
    df.drop('Назначение', axis=1, inplace=True)
    df['sort_row'] = 1
    df = pd.concat([df, df_naz]).sort_values(by=['index', 'sort_row'], ascending=[True, True]).fillna('')
    del df_naz
    df[['Код продукции', 'Поставщик', 'Ед.измерения', 'Кол', 'Масса']] = ('', '', '', '1', '')

    df = df[[
        'Позиция',
        'Техническая характеристика',
        'Опросный лист',
        'Код продукции',
        'Поставщик',
        'Ед.измерения',
        'Кол',
        'Масса',
        'Примечание'
    ]].copy().reset_index(drop=True)

    return df

    #


# TODO: Функция для получения df (2 шт) для формирования ТСП

def get_tsp():
    # Столбцы из Перечня приборов

    arrya_pp = connectiondef('Перечень приборов')
    df_pp = pd.DataFrame(arrya_pp[1:], columns=arrya_pp[0])[[
        "Позиция",
        "Назначение",
        "Система"
    ]].fillna('')
    del arrya_pp

    # Столбцы из ТСП

    arrya_tsp = connectiondef('ТСП')
    df_tsp = pd.DataFrame(arrya_tsp[1:], columns=arrya_tsp[0])[[
        'Позиция',
        'Тег сигнала',
        'Клемма прибора',
        'Жила местного кабеля',
        'Кабель местный',
        'Соединительная коробка',
        'Кабельный ввод коробки',
        'Клемма коробки',
        'Жила кабеля магистрального',
        'Кабель магистральный',
        'Шкаф',
        'Клеммник шкафа',
        'Клемма',
        'Примечание'
    ]]
    del arrya_tsp

    # Столбцы из ИО

    arrya_io = connectiondef('ИО')
    df_io = pd.DataFrame(arrya_io[1:], columns=arrya_io[0])[[
        "Позиция",
        "Тег сигнала",
        "Тип сигнала",
        "Взрывозащита",
        "Сигнал/питание"
    ]].fillna('')
    del arrya_io

    df_tsp_one = ''
    df_tsp_two = ''

    return df_tsp_one, df_tsp_two


# TODO: Функция для получения df (2 шт) для формирования КЖ

def get_kj():

    # Столбцы из ТСП

    arrya_tsp = connectiondef('ТСП')
    df_tsp = pd.DataFrame(arrya_tsp[1:], columns=arrya_tsp[0])[[
        'Тег сигнала',
        'Кабель местный',
        'Соединительная коробка',
        'Кабель магистральный',
        'Шкаф'
    ]]
    del arrya_tsp

    # Столбцы из КЖ

    arrya_kj = connectiondef('КЖ')
    df_kj = pd.DataFrame(arrya_kj[1:], columns=arrya_kj[0])[[
        'Номер кабеля',
        'Тип кабеля',
        'Марка кабеля',
        'Диаметр кабеля',
        'Длина кабеля',
        'Труба',
        'Длина трубы',
        'Металлорукав',
        'Длина металлорукава',
        'Примечание'
    ]]
    del arrya_kj

    # True для всех прямых кабелей
    df_tsp_first = df_tsp_first[(df_tsp_first['Необходимость проектирования'] != 'Нет') &
                                (df_tsp_first['Необходимость проектирования'] != 'нет')].copy()

    df_tsp_first['Прямой кабель в шкаф'] = [True if x == '' or x == '-' else False for x in
                                            df_tsp_first['Соединительная коробка']]

    arrya_cab = connectiondef('Кабели', facility)
    df_cab = pd.DataFrame(arrya_cab[2:], columns=arrya_cab[1])
    df_cab = df_cab[(df_cab['Номер кабеля'] != '') &
                    (df_cab['Выгрузить в Word?'] == 'Да') &
                    (df_cab['Секция'] == section)]

    df_cab = df_cab[~df_cab.duplicated(subset=['Номер кабеля'])]

    for col in df_cab.columns:
        df_cab.rename(columns={col: f'df_cab_{col}'}, inplace=True)

    # Построение фрейма данных местных кабелей df_mc
    df_tsp = df_tsp_first[(df_tsp_first['Кабель местный (номер)'] != '')]
    # Удаление дубликатов
    df_tsp = df_tsp[~df_tsp.duplicated(subset=['Кабель местный (номер)', ])]

    # False для всех местных кабелей
    df_tsp['Магистральный кабель в шкаф'] = False
    # Если коробки нет - пишем шкаф
    m = (df_tsp['Соединительная коробка'] == '') | (df_tsp['Соединительная коробка'] == '-')
    df_tsp.loc[m, ['Соединительная коробка', 'Шкаф']] = df_tsp.loc[m, ['Шкаф', 'Шкаф']].to_numpy()

    for col in df_tsp.columns:
        df_tsp.rename(columns={col: f'df_tsp_{col}'}, inplace=True)

    df_mc = pd.merge(left=df_tsp,
                     right=df_cab,
                     how='left',
                     on=None,
                     left_on='df_tsp_Кабель местный (номер)',
                     right_on='df_cab_Номер кабеля',
                     left_index=False, right_index=False, sort=False,
                     suffixes=('_x', '_y'), copy=True, indicator=False,
                     validate=None)
    df_mc.fillna('', inplace=True)

    df_mc = df_mc[df_mc['df_cab_Номер кабеля'] != '']

    df_mc = df_mc[['df_tsp_Кабель местный (номер)',
                   'df_tsp_Позиционное обозначение прибора',
                   'df_tsp_Соединительная коробка',
                   'df_cab_Марка',
                   'df_cab_Длина кабеля',
                   'df_cab_Труба',
                   'df_cab_Длина трубы',
                   'df_cab_Металлорукав',
                   'df_cab_Длина металлорукава',
                   'df_cab_Примечание',
                   'df_tsp_Соединительная коробка',
                   'df_tsp_Магистральный кабель в шкаф',
                   'df_tsp_Прямой кабель в шкаф',
                   'df_tsp_Система РСУ / ПАЗ']]

    rename_df(df_mc, ['Номер кабеля',
                      'Откуда',
                      'Куда',
                      'Марка',
                      'Длина кабеля',
                      'Труба',
                      'Длина трубы',
                      'Металлорукав',
                      'Длина металлорукава',
                      'Примечание',
                      'Коробка',
                      'Магистральный кабель в шкаф',
                      'Прямой кабель в шкаф',
                      'Система'])

    # Построение фреймай данных с магистральными кабелями df_mgc

    df_tsp_mg = df_tsp_first[
        (df_tsp_first['Магистральный кабель (номер)'] != '')]
    # Удаление дубликатов
    df_tsp_mg = df_tsp_mg[~df_tsp_mg.duplicated(subset=['Магистральный кабель (номер)', ])]

    # True для всех магистральных кабелей
    df_tsp_mg['Магистральный кабель в шкаф'] = True

    for col in df_tsp_mg.columns:
        df_tsp_mg.rename(columns={col: f'df_tsp_mg_{col}'}, inplace=True)

    df_mgc = pd.merge(left=df_tsp_mg,
                      right=df_cab,
                      how='left',
                      on=None,
                      left_on='df_tsp_mg_Магистральный кабель (номер)',
                      right_on='df_cab_Номер кабеля',
                      left_index=False, right_index=False, sort=False,
                      suffixes=('_x', '_y'), copy=True, indicator=False,
                      validate=None)
    df_mgc.fillna('', inplace=True)
    df_mgc = df_mgc[df_mgc['df_cab_Номер кабеля'] != '']

    df_mgc = df_mgc[['df_tsp_mg_Магистральный кабель (номер)',
                     'df_tsp_mg_Соединительная коробка',
                     'df_tsp_mg_Шкаф',
                     'df_cab_Марка',
                     'df_cab_Длина кабеля',
                     'df_cab_Труба',
                     'df_cab_Длина трубы',
                     'df_cab_Металлорукав',
                     'df_cab_Длина металлорукава',
                     'df_cab_Примечание',
                     'df_tsp_mg_Соединительная коробка',
                     'df_tsp_mg_Магистральный кабель в шкаф',
                     'df_tsp_mg_Прямой кабель в шкаф',
                     'df_tsp_mg_Система РСУ / ПАЗ']]
    rename_df(df_mgc, ['Номер кабеля',
                       'Откуда',
                       'Куда',
                       'Марка',
                       'Длина кабеля',
                       'Труба',
                       'Длина трубы',
                       'Металлорукав',
                       'Длина металлорукава',
                       'Примечание',
                       'Коробка',
                       'Магистральный кабель в шкаф',
                       'Прямой кабель в шкаф',
                       'Система'])

    # Объединяем df_mc и df_mgc в одну таблицу
    df_out = pd.concat([df_mc, df_mgc], ignore_index=True)
    #
    #
    #
    # df_out['Номер кабеля'].to_excel('qweqwe.xlsx')
    #
    #
    #
    df_out = df_out.sort_values(
        ['Система', 'Прямой кабель в шкаф', 'Коробка', 'Магистральный кабель в шкаф', 'Номер кабеля'],
        ascending=[False, True, True, True, True])
    df_out.reset_index(drop=True, inplace=True)

    """Создание таблицы спецификации для кабельного журнала
    (первая таблица в файлах КЖ)

    Создать таблицы ['Наименование', 'Количество', 'Порядок выгрузки типа'] для каждого из типа уникальных позиций марок_кабеля, маталорукавов, трубопроводов, кабеля заземления
    Посчитать длинну каждой позиции
    Объединить их в одну таблицу (записи друг по другом) .concat
    Добавить столбец ['Порядок выгрузки описание\наименование'] указать значение True
    Создать таблицу с описанием каждого типа
    Переименовать столбцы в соответсвии с таблицей перечисления позиций всех типов ['Наименование', 'Длина', 'Порядок выгрузки типа'] отсутствуюзие столбцы - пустые
    Добавить столбец ['Порядок выгрузки описание\наименование'] указать значение True
    Дополнить таблицу столбцом ['Описание'] с диска используя .merge
    Отсортировать по ['Порядок выгрузки типа', 'Описание']
    """

    # Копируем датасет
    df = df_out

    for item in ['Длина кабеля', 'Длина трубы', 'Длина металлорукава']:
        df[item] = pd.to_numeric(df[item], errors='coerce', downcast='integer').fillna(0)

    marc = df[(df['Марка'] != '-') & (df['Марка'] != '') & (df['Марка'] != ' ')][['Марка', 'Длина кабеля']].groupby(
        by=['Марка']).agg({'Длина кабеля': ['sum']}).reset_index()
    tubing = df[(df['Труба'] != '-') & (df['Труба'] != '') & (df['Труба'] != ' ')][
        ['Труба', 'Длина трубы']].groupby(
        by=['Труба']).agg({'Длина трубы': ['sum']}).reset_index()
    metalhose = df[(df['Металлорукав'] != '-') & (df['Металлорукав'] != '') & (df['Металлорукав'] != ' ')][
        ['Металлорукав', 'Длина металлорукава']].groupby(by=['Металлорукав']).agg(
        {'Длина металлорукава': ['sum']}).reset_index()

    marc.columns = marc.columns.droplevel(1)
    tubing.columns = tubing.columns.droplevel(1)
    metalhose.columns = metalhose.columns.droplevel(1)

    rename_df(marc, ['Наименование', 'Количество'])
    rename_df(tubing, ['Наименование', 'Количество'])
    rename_df(metalhose, ['Наименование', 'Количество'])

    marc['Порядок выгрузки типа'] = 0
    tubing['Порядок выгрузки типа'] = 1
    metalhose['Порядок выгрузки типа'] = 2

    # df_out['Номер кабеля'].to_excel('qweqwe.xlsx')

    # Расчет длины кабеля заземления

    count_devices = \
        df_tsp_first['Позиционное обозначение прибора'][((df_tsp_first['Необходимость проектирования'] == 'да') |
                                                         (df_tsp_first['Необходимость проектирования'] == 'Да') |
                                                         (df_tsp_first['Необходимость проектирования'] == 'Нов') |
                                                         (df_tsp_first['Необходимость проектирования'] == 'Нов.') |
                                                         (df_tsp_first[
                                                              'Необходимость проектирования'] == 'Да. В приложении пусто') |
                                                         (df_tsp_first[
                                                              'Необходимость проектирования'] == 'Нов. (HAZOP)')) &
                                                        (df_tsp_first['Позиционное обозначение прибора'] != '') &
                                                        (df_tsp_first['Позиционное обозначение прибора'] != '-') &
                                                        (df_tsp_first[
                                                             'Позиционное обозначение прибора'] != 'HOLD') &
                                                        (df_tsp_first['Позиционное обозначение прибора'] != '?') &
                                                        (df_tsp_first['№ Секции'] == section)][
            ~df_tsp_first.duplicated(subset=['Позиционное обозначение прибора', ])].shape[0]

    count_junctionbox = \
    df_tsp_first['Соединительная коробка'][((df_tsp_first['Необходимость проектирования'] == 'да') |
                                            (df_tsp_first['Необходимость проектирования'] == 'Да') |
                                            (df_tsp_first['Необходимость проектирования'] == 'Нов') |
                                            (df_tsp_first['Необходимость проектирования'] == 'Нов.') |
                                            (df_tsp_first[
                                                 'Необходимость проектирования'] == 'Да. В приложении пусто') |
                                            (df_tsp_first['Необходимость проектирования'] == 'Нов. (HAZOP)')) &
                                           (df_tsp_first['Соединительная коробка'] != '') &
                                           (df_tsp_first['Соединительная коробка'] != '-') &
                                           (df_tsp_first['Соединительная коробка'] != 'нет места установки') &
                                           (df_tsp_first['Соединительная коробка'] != '?') &
                                           (df_tsp_first['Соединительная коробка'] != 'HOLD') &
                                           (df_tsp_first['№ Секции'] == section)][
        ~df_tsp_first.duplicated(subset=['Соединительная коробка', ])].shape[0]

    len_grounding_cable = 3 * (count_devices + count_junctionbox)
    grounding_cable = {'Наименование': ['ПуГВ 1х4'],
                       'Количество': [int(len_grounding_cable)],
                       'Порядок выгрузки типа': [3]}

    df_grounding_cable = pd.DataFrame(grounding_cable)

    result_df = pd.concat([marc, tubing, metalhose, df_grounding_cable], ignore_index=True).reset_index(
        drop=True).sort_values(
        ['Порядок выгрузки типа', 'Наименование'], ascending=[True, True]).reset_index(drop=True)

    result_df['Порядок выгрузки описание\наименование'] = True

    # Описание марок кабелей берелся только из установки ЛУ-6У

    cabel_descriptions = connectiondef('Марки кабелей', 'ЛК-6У')
    df_cabel_descriptions = pd.DataFrame(cabel_descriptions[1:], columns=cabel_descriptions[0])
    for item in ['Колво групп', 'Колво жил в группе', 'Диаметр жилы']:
        df_cabel_descriptions[item] = pd.to_numeric(df_cabel_descriptions[item], errors='coerce',
                                                    downcast='float').fillna(0)
    result_df = pd.merge(left=result_df,
                         right=df_cabel_descriptions,
                         how='left',
                         on='Наименование').reset_index(drop=True)
    # result_df = result_df.sort_values(['Порядок выгрузки типа', 'Описание', 'Наименование'],

    result_df = result_df.sort_values(
        ['Порядок выгрузки типа', 'Марка', 'Тип', 'Окончание', 'Колво групп', 'Колво жил в группе', 'Диаметр жилы'],
        ascending=[True, False, False, False, True, True, True]).reset_index(drop=True)

    result_df['Индекс'] = result_df.index
    result_df['Количество'] = result_df['Количество'].astype(int)

    df_cabel_descriptions_column = pd.DataFrame()
    df_cabel_descriptions_column['Наименование'] = result_df['Описание']
    df_cabel_descriptions_column['Индекс'] = result_df['Индекс']
    df_cabel_descriptions_column['Описание'] = ''
    df_cabel_descriptions_column['Количество'] = ''
    df_cabel_descriptions_column['Примечание'] = ''
    df_cabel_descriptions_column['Порядок выгрузки описание\наименование'] = False
    df_cabel_descriptions_column.reset_index(drop=True)

    result_df = pd.concat([result_df, df_cabel_descriptions_column], ignore_index=True).reset_index(
        drop=True).sort_values(
        ['Индекс', 'Порядок выгрузки описание\наименование'], ascending=[True, True])
    result_df['Пустой'] = ''

    result_df = result_df[['Пустой', 'Наименование', 'Количество', 'Примечание']]
    result_df.fillna('', inplace=True)
    result_df = result_df[~result_df.duplicated(subset=['Наименование', ])].reset_index(drop=True)

    for item in ['Длина кабеля', 'Длина трубы', 'Длина металлорукава']:
        df[item].replace(0, '-', inplace=True)

    return [df_out.values.tolist(), result_df.values.tolist()]


# a = getTemptureForOL()
# b = getPressureForOL()
# c = getFlowForOL()
# d = getLevelForOL()
# e = get_io()
# f = get_spec()
# print('')
